version: 2.1

parameters:

  releaseGradleFlags:
    type: string
    default: "-PSNAPSHOT=false -PLOCAL_UPLOAD=false -PRELEASE_BUILD_TYPE_ENABLED=true -PRELEASE_FAKE_ENABLED=true -PACCEPT_SNAPSHOT_DEPENDENCIES=false -Dorg.gradle.internal.publish.checksums.insecure=true --stacktrace"

  # API

  api:
    type: boolean
    default: false

  release:
    type: boolean
    default: false

references:

  ## Workspace

  working_dir: &working_dir
                 ~/project

orbs:
  ruby: circleci/ruby@1.1.2

executors:
  jdk_executor:
    working_directory: *working_dir
    docker:
      - image: circleci/openjdk:11-jdk
    environment:
      JVM_OPTS: -Xmx3200m
      GRADLE_OPTS: -Dorg.gradle.caching=false -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.jvmargs="-Xmx4g -Xms1g"
      JAVA_MAX_HEAP_SIZE: 4096m

commands:
  restore_gradle_cache:
    steps:
      - restore_cache:
          keys:
            - v2-gradle_cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ .Branch }}-{{ checksum "buildSrc/src/main/kotlin/Libs.kt" }}-{{ checksum "buildSrc/src/main/kotlin/BuildLibs.kt" }}
            - v2-gradle_cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ .Branch }}
            - v2-gradle_cache-

  save_gradle_cache:
    steps:
      - save_cache:
          key: v2-gradle_cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ .Branch }}-{{ checksum "buildSrc/src/main/kotlin/Libs.kt" }}-{{ checksum "buildSrc/src/main/kotlin/BuildLibs.kt" }}
          paths:
            - ~/.gradle

jobs:
  build:
    executor: jdk_executor
    steps:
      - checkout
      - restore_gradle_cache
      - run:
          name: Download dependencies
          command: ./gradlew dependencies --refresh-dependencies --stacktrace
      - save_gradle_cache
      - run:
          name: Assembling
          command: ./gradlew assemble --stacktrace
      - run:
          name: Saving jars
          command: |
            mkdir -p ~/jars/
            find . -type f -regex ".*/build/libs/.*jar" -exec cp {} ~/jars/ \;
          when: always
      - store_artifacts:
          path: ~/jars
          destination: jars

  verify:
    executor: jdk_executor
    steps:
      - checkout
      - restore_gradle_cache
      - run:
          name: Verifying
          command: ./gradlew check --stacktrace
      - save_cache:
          paths:
            - ~/.gradle
          key: app-{{ .Branch }}-{{ checksum "build.gradle" }}
      - run:
          name: Saving test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit

  publish:
    executor: jdk_executor
    steps:
      - checkout
      - restore_gradle_cache
      - run:
          name: Uploading to Nexus Sonatype
          command: ./gradlew publish -PLOCAL_UPLOAD=false --stacktrace

  release:
    executor: jdk_executor
    steps:
      - checkout
      - run:
          name: Close GitHub Milestone
          command: ./gradlew :closeGitHubMilestone << pipeline.parameters.releaseGradleFlags >>
      - run:
          name: Create GitHub Release
          command: ./gradlew :createGitHubRelease << pipeline.parameters.releaseGradleFlags >>
      - ruby/install:
          version: '2.7'
      - run:
          name: Install github_changelog_generator
          command: gem install github_changelog_generator -v 1.13.2
#      - run:
#          name: Generate Changelog
#          command: ./gradlew :generateChangelog << pipeline.parameters.releaseGradleFlags >>
      #  http://www.bennybottema.com/2019/02/20/automating-your-github-library-releases-to-maven-central/
      - run:
          name: Configure GPG private key for signing project artifacts in OSS Sonatype
          command: echo $SECRING_GPG_ASC_BASE64 | base64 --decode | gpg --batch --no-tty --import --yes


      - run:
          name: Publish
          command: ./gradlew publish << pipeline.parameters.releaseGradleFlags >>
#      - run:
#          name: Close and Release Repository
#          command: ./gradlew closeAndReleaseRepository << pipeline.parameters.releaseGradleFlags >>

workflows:
  commit:
    unless: << pipeline.parameters.api >>
    jobs:
      - build
      - verify:
          requires:
            - build
      - publish:
          filters:
            branches:
              only:
                - master
                - production
          requires:
            - verify
  release:
    when: << pipeline.parameters.release >>
    jobs:
      - release
